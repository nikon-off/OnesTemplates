{1,
{3,
{"Мои шаблоны",1,0,"",""},
{8,
{"Комментарии",1,0,"",""},
{0,
{"Невада*",0,0,"Нева[да]","//Невада (<?"""", ДатаВремя, """"> Ганиев наряд <?""Номер наряда"">
<?>
//Невада )<?"""", ДатаВремя, """">"}
},
{0,
{"Невада* (однострочный)",0,0,"Нева[да]","<?>//Невада (<?"""", ДатаВремя, """"> Ганиев наряд <?""Номер наряда"">"}
},
{0,
{"Романия (однострочный)",0,0,"Рома[ния]","<?>//{{ 1cromania"}
},
{0,
{"Романия (многострочный)",0,0,"Рома[ния]","//{{ 1cromania
<?>
//}} 1cromania"}
},
{0,
{"Романия (поставка - добавлено)",0,0,"Рома[ния]","//{{ 1cromania+
<?>
//}} 1cromania+"}
},
{0,
{"Романия (поставка - удалено)",0,0,"Рома[ния]","//{{ 1cromania-
<?>
//}} 1cromania-"}
},
{0,
{"Ганиев* (блок кода)",0,0,"Гани[ев]","//Ганиев С.Т.(<?"""", ДатаВремя, """">
<?>
//Ганиев С.Т.)<?"""", ДатаВремя, """">"}
},
{0,
{"Ганиев* (строка кода)",0,0,"Гани[ев]","<?>//Ганиев С.Т.(<?"""", ДатаВремя, """">"}
}
},
{2,
{"XML",1,0,"",""},
{3,
{"Самая простая выгрузка/загрузка",1,0,"",""},
{0,
{"Выгрузка в xml (простая)",0,0,"","	ФайлВыгрузки = <?ПутьКФайлу>;
	
	//создание файла
	ФайлXML = Новый Файл(ФайлВыгрузки);
	Если (ФайлXML.Существует()) Тогда
		УдалитьФайлы(ФайлXML.ПолноеИмя);
	Иначе
		СоздатьКаталог(ФайлXML.Путь);
	КонецЕсли;
	
	ФайлXML = Новый ЗаписьXML;
	Попытка
		ФайлXML.ОткрытьФайл(ФайлВыгрузки);
		ФайлXML.ЗаписатьОбъявлениеXML();
	Исключение
		Возврат;
	КонецПопытки;
	Если ФайлXML = Неопределено Тогда
		Сообщить(""Ошибка создания файла выгрузки!"", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	//данные
	ФайлXML.ЗаписатьНачалоЭлемента(""<?ИмяУзлаВерхнегоУровня>"");
	
	//<?ФормированиеДанныхXML>
	//ФайлXML.ЗаписатьНачалоЭлемента(""<?ИмяУзла>"");
	//ФайлXML.ЗаписатьАтрибут(""<?ИмяАтрибута>"", ""<?ЗначениеАтрибута>"");
	//ФайлXML.ЗаписатьКонецЭлемента();
	
	ФайлXML.ЗаписатьКонецЭлемента();
	ФайлXML.Закрыть();
"}
},
{0,
{"Загрузка из xml (простая)",0,0,"","	ФайлВыгрузки = <?ПутьКФайлу>;
	
	Файл = Новый Файл(ФайлВыгрузки);
	Если НЕ Файл.Существует() ИЛИ Файл.ЭтоКаталог() Тогда
		Возврат;
	КонецЕсли;
	ФайлXML = Новый ЧтениеXML;
	Попытка
		ФайлXML.ОткрытьФайл(ФайлВыгрузки);
	Исключение
		Сообщить(""Не удалось открыть файл: ""+ОписаниеОшибки(),СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	Если ФайлXML = Неопределено Тогда
		Сообщить(""Ошибка при открытии файла!"", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Пока ФайлXML.Прочитать() Цикл
		
		// Чтение ""шапки"" файла
		Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ФайлXML.Имя = ""<?ИмяУзлаВерхнегоУровня>"" Тогда
			Прервать; // Конец файла выгрузки
		КонецЕсли;
		
		// Чтение данных
		Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = ""<?ИмяУзла>"" Тогда
			
			Пока ФайлXML.ПрочитатьАтрибут() Цикл
				Если ФайлXML.ЛокальноеИмя = ""<?ИмяАтрибута>"" Тогда
					<?ПеременнаяАтрибут> = ФайлXML.Значение;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ФайлXML.Закрыть();
"}
},
{0,
{"Запись одного элемента",0,0,"","ФайлXML.ЗаписатьНачалоЭлемента(""<?ИмяУзла>"");
ФайлXML.ЗаписатьАтрибут(""<?ИмяАтрибута>"", ""<?ЗначениеАтрибута>"");
ФайлXML.ЗаписатьТекст(""<?Текст>"");
ФайлXML.ЗаписатьКомментарий(""<?Комментарий>"");
ФайлXML.ЗаписатьКонецЭлемента();"}
}
},
{2,
{"Алгоритмы работы с xml",1,0,"",""},
{0,
{"Создание файла xml (функция)",0,0,"","// Создание и открытие на запись потока данных xml
//
// Параметры
//  ПутьКФайлу  - Строка - Полный путь к файлу xml для записи
//
// Возвращаемое значение:
//   ЗаписьXML   - Созданный файл xml, открытый для записи
//
Функция СоздатьФайлXMLДляЗаписи(ПутьКФайлу) Экспорт
	
	ФайлXML = Новый Файл(ПутьКФайлу);
	Если (ФайлXML.Существует()) Тогда
		УдалитьФайлы(ФайлXML.ПолноеИмя);
	Иначе
		СоздатьКаталог(ФайлXML.Путь);
	КонецЕсли;
	
	ФайлXML = Новый ЗаписьXML;
	Попытка
		ФайлXML.ОткрытьФайл(ПутьКФайлу);
		ФайлXML.ЗаписатьОбъявлениеXML();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	Если ФайлXML = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ФайлXML;
	
КонецФункции
"}
},
{0,
{"Добавление элемента в файл xml (процедура)",0,0,"","// Добавление одного элемента xml
//
// Параметры
//  ФайлXML  - ЗаписьXML - Инициированный файл xml, открытый на запись
//  ИмяЭлемента  - Строка - Имя для нового узла xml, в которое будет
//                 записано значение
//  ЗначениеЭлемента  - Произвольный - Записываемое значение в новый узел xml.
//                 Поддерживаются только типы значений, сериализуемые в xml
//  ЗаписыватьПустоеЗначение  - Булево - Признак необходимости записи значения, даже если оно не заполнено.
//                 (пустая строка или нулевое число). Значение по умолчанию: Ложь
//
Процедура ДобавитьЭлементВXMLФайл(ФайлXML, ИмяЭлемента, ЗначениеЭлемента, ЗаписыватьПустоеЗначение = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЗначениеЭлемента) И НЕ ЗаписыватьПустоеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	ТипЗначенияXML = XMLТипЗнч(ЗначениеЭлемента);
	Попытка
		URIПространстваИмен = ТипЗначенияXML.URIПространстваИмен;
		ИмяТипа = ТипЗначенияXML.ИмяТипа;
	Исключение
		Возврат;
	КонецПопытки;
	
	ФайлXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	ФайлXML.ЗаписатьАтрибут(""Тип"", URIПространстваИмен, ИмяТипа);
	ФайлXML.ЗаписатьАтрибут(""Значение"", XMLСтрока(ЗначениеЭлемента));
	ФайлXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры
"}
}
}
},
{1,
{"Работа со строками",1,0,"",""},
{0,
{"Получить из строки только цифры",0,0,"","Функция ПолучитьИзСтрокиТолькоЦифры(ИсходнаяСтрока) Экспорт
	
	КопияСтроки = СокрЛП(ИсходнаяСтрока);
	ДлинаСтроки = СтрДлина(КопияСтроки);
	Результат = """";
	
	Для Сч = 1 По ДлинаСтроки Цикл
		
		Симв = Сред(КопияСтроки, Сч, 1);
		Если Найти(""0123456789"", Симв) > 0 Тогда
			Результат = Результат + Симв;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
"}
}
}
}
}