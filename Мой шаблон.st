{1,
{22,
{"Стандарты разработки",1,0,"",""},
{5,
{"Готовые функциии",1,0,"",""},
{0,
{"ПолучитьТЗизMXL",0,0,"ПолучитьТЗизMXL","Функция ПолучитьТЗизMXL()
	
	ТабДок = Новый ТабличныйДокумент; 
	ТабДок.Прочитать(""<?""Путь до файла"">"");
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабДок.Область());//передаем ТЗ
	ПЗ.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
	ПЗ.ЗаполнитьНастройки();
	ПЗ.Выполнить();
	Возврат ПЗ.Результат.Выгрузить();
	
КонецФункции

"}
},
{0,
{"Проверить что это ГУИД",0,0,"этогуид","СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(<?""Переменная гуид"">)"}
},
{0,
{"Ссылка существует",0,0,"ссылкасуществует","ОбщегоНазначения.СсылкаСуществует(<?""Проверяемая ссылка"">)"}
},
{0,
{"Константа клиент",0,0,"конст[анта]","УПДК_ОбщегоНазначенияВызовСервера.ЗначениеКонстанты(""<?""Имя константы"">"")"}
},
{0,
{"Константа сервер",0,0,"конст[анта]","УПДК_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты(""<?""Имя константы"">"")"}
}
},
{5,
{"Шаблоны для HTTP сервисов",1,0,"",""},
{0,
{"Заготовка для метода",0,0,"","	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить(""Content-Type"", ""application/json; charset=utf-8"");	
	
	Результат = """";
	
	//Логика кода
	
	//Если <Условие для проверки> Тогда
	//	
	//	ТекстОшибки = """";
	//	
	//	ТелоОтвета = СтрокаОтвета(Неопределено, Ложь, ТекстОшибки);
	//	
	//	Ответ = Новый HTTPСервисОтвет(401);
	//	Ответ.УстановитьТелоИзСтроки(ТелоОтвета);
	//	
	//	Возврат Ответ;
	//	
	//КонецЕсли;
	
	Попытка
		
		//Логика кода
		
	Исключение
		
		ТемаОшибки = """";
		
		ТекстОшибки = СтрШаблон(""%1%2%3"",ТемаОшибки, Символы.ПС, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());  
		
		ТелоОтвета = СтрокаОтвета(Неопределено, Ложь, ТекстОшибки);
		
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.УстановитьТелоИзСтроки(ТелоОтвета); 
		
		Возврат Ответ;
		
	КонецПопытки;	
	
	ТелоОтвета = СтрокаОтвета(Результат, Истина, """");
	
	Ответ.УстановитьТелоИзСтроки(ТелоОтвета);
	
	Возврат Ответ;"}
},
{0,
{"Заготовка для запроса",0,0,"","	
	ИмяМетода = Запрос.ПараметрыURL[""ИмяМетода""];
	
	РезультатПроверки = ОбщегоНазначенияHTTPСервисы.ПроверкаАвторизации(Запрос);
	Если Не РезультатПроверки.Успешно Тогда
		ТелоОтвета = RestAPI_Методы.СтрокаОтвета(Неопределено, Ложь, РезультатПроверки.Ошибка);
		
		Ответ = Новый HTTPСервисОтвет(405);
		Ответ.УстановитьТелоИзСтроки(ТелоОтвета);  
		Возврат Ответ;
	КонецЕсли; 
	
	Ответ = Новый HTTPСервисОтвет(200);  
	Ответ.Заголовки.Вставить(""Content-Type"", ""application/json; charset=utf-8""); 
	
	Если ИмяМетода = """" Тогда		
		Ответ = """";
	ИначеЕсли ИмяМетода = """" Тогда		
		Ответ = """"; 
	Иначе
		ТелоОтвета = RestAPI_Методы.СтрокаОтвета(Неопределено, Ложь, ""Method not found."");
		
		Ответ.КодСостояния = 404;
		Ответ.УстановитьТелоИзСтроки(ТелоОтвета);
		
	КонецЕсли;
	
	Возврат Ответ;	
"}
},
{0,
{"Заготовка для пост метода",0,0,"","	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить(""Content-Type"", "" application/json"");
	
	//В теле запроса будут прилетать данные авторизации
	ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
	ТекущаяДата = ТекущаяДатаСеанса();
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал(""POST$/"", ТекущаяДата, ТелоЗапроса);
	
	Попытка		
		ПараметрыЗапроса = ПрочитатьJsonИзСтроки(ТелоЗапроса);		
	Исключение		
		ТелоОтвета = СтрокаОтвета(Неопределено, Ложь, ""Incorrect id structure!"");
		
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.УстановитьТелоИзСтроки(ТелоОтвета); 
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 500, ТелоОтвета);
		
		Возврат Ответ;		
	КонецПопытки;
	
	НаличиеОбязательныхПараметров = ПараметрыЗапроса.Свойство("""") И ПараметрыЗапроса.Свойство("""") 
										И ПараметрыЗапроса.Свойство("""");
	
	Если Не НаличиеОбязательныхПараметров Тогда
		
		ТекстОшибки = НСтр(""ru = 'Проверьте наличия обязательных параметров в запросе: '"");
		
		ТелоОтвета = СтрокаОтвета(Неопределено, Ложь, ТекстОшибки);
		
		Ответ = Новый HTTPСервисОтвет(401);
		Ответ.УстановитьТелоИзСтроки(ТелоОтвета);
		
		Возврат Ответ;
		
	КонецЕсли;
	
	ПараметрыЗаполнены = ЗначениеЗаполнено(ПараметрыЗапроса.) И ЗначениеЗаполнено(ПараметрыЗапроса.) 
							И ЗначениеЗаполнено(ПараметрыЗапроса.);
	
	Если Не ПараметрыЗаполнены Тогда
		
		ТекстОшибки = НСтр(""ru = 'Проверьте заполненность обязательных параметров в запросе: '"");
		
		ТелоОтвета = СтрокаОтвета(Неопределено, Ложь, ТекстОшибки);
		
		Ответ = Новый HTTPСервисОтвет(401);
		Ответ.УстановитьТелоИзСтроки(ТелоОтвета);
		
		Возврат Ответ;
		
	КонецЕсли;
	
	//Если <Условие> Тогда   

	//	//Логика кода
	//	
	//	ТелоОтвета = СтрокаОтвета(СтруктураТокена, Истина);
	//	Ответ.УстановитьТелоИзСтроки(ТелоОтвета);
	//Иначе			
	//	ТелоОтвета = СтрокаОтвета(Неопределено, Ложь, ""Incorrect id structure!"");
	//	
	//	Ответ = Новый HTTPСервисОтвет(405);
	//	Ответ.УстановитьТелоИзСтроки(ТелоОтвета);  				
	//КонецЕсли;  
	
	Возврат Ответ;
"}
},
{0,
{"Запись журнала",0,0,"ЗаписьЖурнала","ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал(""<?""Наименование"">"", ТекущаяДатаСеанса(), <?""Запрос"">);"}
},
{0,
{"Добавить ответ",0,0,"ДобавитьОтвет","РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, ТелоОтветаСтрока);"}
}
},
{1,
{"Шаблоны событий для модулей",1,0,"",""},
{0,
{"ОбработкаПроверкиЗаполнения",0,0,"ОбработкаПроверкиЗаполнения","Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Ошибки = Неопределено;
	НеПроверяемыеРеквизиты = Новый Массив; 
	
	//НеПроверяемыеРеквизиты.Добавить("""");  
	
	//Пример оформления ошибок
	//ТекстОшибки = НСтр(""ru = 'Сумма этапов оплаты не соответствует сумме договора.'"");
	//ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ""Объект.СуммаДокумента"", ТекстОшибки);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НеПроверяемыеРеквизиты);
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);	
	
КонецПроцедуры
"}
}
},
{5,
{"Заготовки",1,0,"",""},
{0,
{"Выбрать файл",0,0,"ВыбратьФайл","&НаКлиенте
Процедура ПутьМакетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
  СтандартнаяОбработка = Ложь;
  Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие); 
  Диалог.Фильтр = ""Макет HTML (*.html)|*.html""; 
  Диалог.Заголовок = ""Выберите макет HTML""; 

  ОповещениеЗавершения = Новый ОписаниеОповещения(""ПриВыбореФайла"", ЭтотОбъект);
  Диалог.Показать(ОповещениеЗавершения); 
  
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореФайла(ВыбФайлы, ДополнительныеПараметры) Экспорт

  Если ВыбФайлы <> Неопределено Тогда
      ПутьКФайлу = ВыбФайлы[0];
  КонецЕсли;

КонецПроцедуры
"}
},
{0,
{"Сообщить пользователю",0,0,"Сообщитьпользователю","ТекстСообщения = НСтр();
ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);"}
},
{0,
{"записать с блокировкой",0,0,"запсблок","	СтруктураЗаполнения = Новый Структура("""",);
	УПДК_ОбщегоНазначения.ЗаписатьДанныеВОбъектСБлокировкой(<?""Имя ссылочкик, в которое надо записать"">, СтруктураЗаполнения);
"}
},
{0,
{"Замена объектов из расширений",0,0,"","//аналог, заменить надо лишнее		
		Если Не Метаданные.Константы.Найти(""Расш1_Дев_КартаМаршрутаЗадачиПоАн"") = Неопределено Тогда 
			КартаМаршрута = УПДК_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты(""Расш1_Дев_КартаМаршрутаЗадачиПоАн"");
		Иначе
			КартаМаршрута = УПДК_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты(""Дев_КартаМаршрутаЗадачиПоАн"");
		КонецЕсли;
"}
},
{0,
{"Выбор каталога",0,0,"","&НаКлиенте
Процедура ПутьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    СтандартнаяОбработка = ЛОЖЬ;
    
    Режим = РежимДиалогаВыбораФайла.ВыборКаталога; 
    ДиалогОткрытия = Новый ДиалогВыбораФайла(Режим); 
    ДиалогОткрытия.Каталог = Объект.Путь;  
    ДиалогОткрытия.Заголовок = ""Выберите каталог""; 
        
    Параметр = """";
    Оповещение = Новый ОписаниеОповещения(""ВыборКаталога_Завершение"", ЭтотОбъект, Параметр );
    ДиалогОткрытия.Показать(Оповещение)
КонецПроцедуры

&НаКлиенте
Процедура ВыборКаталога_Завершение(Результат, Параметр) Экспорт
    Если Результат = Неопределено Тогда
         Сообщить(""Каталог не выбран"");
         Возврат;
     КонецЕсли;
    Объект.Путь = Результат[0]
КонецПроцедуры
"}
}
},
{0,
{"СноскаПоЗадаче",0,1,"","Подразделение; //++Никонов по задаче ENCO-190"}
},
{0,
{"Никонов",0,0,"Колян2","//++Никонов по задаче <?"""", ВыборВарианта, ""CRM4DEV"", ""CRM4DEV"", ""PART"", ""PART"",  ""ENCO"", ""ENCO"", ""TIS"", ""TIS"", ""FLAT"", ""FLAT"", ""GSM"", ""GSM"">-""доработки по задачам и БП для Партнера""

//--Никонов"}
},
{0,
{"Никонов",0,0,"Колян","//++Никонов по задаче <?"""", ВыборВарианта, ""CRM4DEV"", ""CRM4DEV"", ""PART"", ""PART"", ""DOMOT"", ""DOMOT"", ""ENCO"", ""ENCO"", ""TIS"", ""TIS"", ""FLAT"", ""FLAT"", ""GSM"", ""GSM"">-<?""Номер задачи"">

//--Никонов"}
},
{0,
{"Черновик",0,0,"Черновик","#Область Черновик
	
#КонецОбласти"}
},
{0,
{"ЗаписьЖурналаРегистрации",0,0,"","ЗаписьЖурналаРегистрации(<?""Имя события"">,УровеньЖурналаРегистрации.Ошибка,
<?>,,
<?""Описание ошибки"">); 
"}
},
{0,
{"НачатьПопытку",0,0,"НачатьПопытку","	НачатьТранзакцию(); 
	
	Попытка
		
		
		
	Исключение
		
		ОписаниеОшибки = ОписаниеОшибки();
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Возврат Б24_Core.ОбработатьОшибкуБитрикс24(ОписаниеОшибки, ""Подробности в журнале API"");
		
	КонецПопытки; 
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
"}
},
{0,
{"Ответ",0,0,"ответ","		Результат.Ответ = СтрШаблон(""%1%2%3"", <?""Название процедуры"">, Символы.ВТаб, <?""Текст ошибки"">);
"}
},
{0,
{"обработка",0,0,"обработка","&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		""<?"""", ТекстЗапроса>""; 
	
	//Запрос.УстановитьПараметр("""",);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Закрыть();
КонецПроцедуры
"}
},
{0,
{"ошибкаф",0,0,"ошибкаф","Если <?""Переменная""> = Неопределено Тогда
	Попытка
		<?""Переменная"">.ПолученоЗначениеНеопределено();
	Исключение
		Возврат Б24_Core.ОбработатьОшибкуБитрикс24(ИнформацияОбОшибке(), ""Подробности в журнале API"");
	КонецПопытки;
КонецЕсли;

		
"}
},
{0,
{"ошибкап",0,0,"ошибкап","Если <?""Переменная""> = Неопределено Тогда
	Попытка
		<?""Переменная"">.ПолученоЗначениеНеопределено();
	Исключение
		Б24_Core.ОбработатьОшибкуБитрикс24(ИнформацияОбОшибке(), ""Подробности в журнале API"");
		Возврат; 
	КонецПопытки;
КонецЕсли;

		
"}
},
{0,
{"данные",0,0,"данные","		Данные = Новый Соответствие;
		Данные.Вставить(""<?""параметр"">"", Формат(<?""параметр"">,""ЧГ=0"")); 
		
		СтруктураОтвета = Б24_Core.CRM_<?""тип запроса"">(""<?""сущность"">"", Данные);
		Если СтруктураОтвета = Неопределено Тогда
			Попытка
				СтруктураОтвета.ПолученоЗначениеНеопределено();
			Исключение
				Возврат Б24_Core.ОбработатьОшибкуБитрикс24(ИнформацияОбОшибке(), ""Подробности в журнале API"");
			КонецПопытки;
		КонецЕсли;
		
"}
},
{0,
{"Удалит после теста",0,0,"удалитьпослетеста","#Область УдалитПослеТеста
	
#КонецОбласти"}
},
{0,
{"ЗаписатьСделку",0,0,"ЗаписатьСделку","РегистрыСведений.Б24_СделкиИстория.ЗаписатьСделку(СтруктураОтвета.ID, Сделка, Б24_Core.СформироватьJSON(СтруктураОтвета));
"}
},
{0,
{"Разработка в расширении",0,0,"","#Область Готовые 

	

#КонецОбласти 

#Область ВПроцессеМодификации  

 	

#КонецОбласти"}
},
{0,
{"Выполнить в фоне",0,0,"","		УстановитьПривилегированныйРежим(Истина);
		
		Попытка  //Бывают странные случаи возможно с кешем, из за чего пишет что ""Сеанс отсутсвует или удален"" и фоновое задание не запускается
			
			ИмяМетода = ""УПДК_Ценообразование.УстановитьФактическиеЦеныОбъектовНедвижимостиСлужебный"";
			
			Если ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура(""ИмяМетода, Состояние"", ИмяМетода, СостояниеФоновогоЗадания.Активно)).Количество() = 0 Тогда
				Задание = ФоновыеЗадания.Выполнить(ИмяМетода,,,""УстановитьФактическиеЦеныОбъектовНедвижимостиСлужебный"");
			КонецЕсли;
			
		Исключение
			
			ЗаписьЖурналаРегистрации(""УстановитьФактическиеЦеныОбъектовНедвижимостиСлужебный"",,,,ОписаниеОшибки());
			УстановитьФактическиеЦеныОбъектовНедвижимостиСлужебный();
			
		КонецПопытки;
"}
},
{0,
{"Менеджер по полному имени для расширений",0,0,"","	Если Не Метаданные.РегистрыСведений.Найти(""Расш1_Дев_СрокиОтветственностиБрокеровВДоговорах"") = Неопределено Тогда
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(""РегистрСведений.Расш1_Дев_СрокиОтветственностиБрокеровВДоговорах"");
	Иначе
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(""РегистрСведений.Дев_СрокиОтветственностиБрокеровВДоговорах"");
	КонецЕсли;"}
},
{0,
{"Полное(стек) и краткое представление ошибок в журнале регистрации",0,0,"","Попытка
   //КодИсполнения
   Ссылка = Неопределено;
Исключение		
	Описание = ОписаниеОшибки();
	// {ВнешняяОбработка.ОписаниеОшибки.Форма.Форма.Форма(6)}: Недостаточно фактических параметров
	
	Информация = ИнформацияОбОшибке();
	// Информация.ИмяМодуля = ""ВнешняяОбработка.ОписаниеОшибки.Форма.Форма.Форма""
	// Информация.ИсходнаяСтрока = ""		А = ОбщегоНазначения.ЗначениеРеквизитаОбъекта();""
	// Информация.НомерСтроки = 30
	// Информация.Описание = ""Недостаточно фактических параметров""
	// Информация.Причина = Неопределено
	
	//КраткоеПредставлениеОшибки(Информация);
	// Недостаточно фактических параметров
	
	Подробности = ПодробноеПредставлениеОшибки(Информация);
	// Недостаточно фактических параметров
	// {ВнешняяОбработка.ОписаниеОшибки.Форма.Форма.Форма(6)}:		А = ОбщегоНазначения.ЗначениеРеквизитаОбъекта();
	
	//ВызватьИсключение ""Не удалось получить значение реквизита по причине: "" + Описание;			
	//ОбщегоНазначения.СообщитьПользователю(""-"" + ПараметрыНоменклатуры.получить(""ExternalItemId"") + "": "" + ОписаниеОшибки());
	ЗаписьЖурналаРегистрации(""НазваниеПервогоУРовня.НазваниеВторогоУровня"", 
	УровеньЖурналаРегистрации.Ошибка, 
	Ссылка.Метаданные(), 
	Ссылка,
	""Описание ошибки в дополнение к основной ошибке: "" + Подробности);
	
	Возврат Номенклатура
	
КонецПопытки;"}
},
{0,
{"Отладка методов серверных модулей через внешнюю обработку",0,0,"","ОписаниеЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий;
ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
Обработка = ВнешниеОбработки.Создать(
""\\какая_то_чаще_всего_сетевая_папка\ВнешняяОбработка1.epf"", Ложь, ОписаниеЗащиты);
//В зависимости от контекста использования Процедура\Функция\Продолжение  коде
Обработка.<Метод()>; Возврат;
Возврат Обработка.<Метод()>;
<?>"}
}
}
}